/*******************************************************************************
 * @author Reika
 * 
 * Copyright 2013
 * 
 * All rights reserved.
 * Distribution of the software in any form is only allowed with
 * explicit, prior permission from the owner.
 ******************************************************************************/
// Date: 12/02/2013 6:56:33 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package Reika.RotaryCraft.Models;

import java.util.List;

import net.minecraft.client.model.ModelRenderer;

import org.lwjgl.opengl.GL11;

import Reika.RotaryCraft.Base.RotaryModelBase;


public class ModelShaftV extends RotaryModelBase
{
  //fields
    ModelRenderer Shape14b;
    ModelRenderer Shape15b;
    ModelRenderer Shape15c;
    ModelRenderer Shape14;
    ModelRenderer Shape1;
    ModelRenderer Shape15d;
    ModelRenderer Shape15;
    ModelRenderer Shape1a;
    ModelRenderer Shape1b;
    ModelRenderer Shape1c;
    ModelRenderer Shape1d;
    ModelRenderer Shape1g;
    ModelRenderer Shape1f;
    ModelRenderer Shape1e;
    ModelRenderer Shape2;
    ModelRenderer Shape2b;
  
  public ModelShaftV()
  {
    textureWidth = 128;
    textureHeight = 32;
    
      Shape14b = new ModelRenderer(this, 7, 3);
      Shape14b.addBox(0F, 0F, 0F, 14, 1, 10);
      Shape14b.setRotationPoint(-7F, 8F, -5F);
      Shape14b.setTextureSize(128, 32);
      Shape14b.mirror = true;
      setRotation(Shape14b, 0F, 0F, 0F);
      Shape15b = new ModelRenderer(this, 15, 1);
      Shape15b.addBox(0F, 0F, 0F, 14, 1, 2);
      Shape15b.setRotationPoint(-7F, 8F, 5F);
      Shape15b.setTextureSize(128, 32);
      Shape15b.mirror = true;
      setRotation(Shape15b, 0F, 0F, 0F);
      Shape15c = new ModelRenderer(this, 15, 13);
      Shape15c.addBox(0F, 0F, 0F, 14, 1, 2);
      Shape15c.setRotationPoint(-7F, 8F, -7F);
      Shape15c.setTextureSize(128, 32);
      Shape15c.mirror = true;
      setRotation(Shape15c, 0F, 0F, 0F);
      Shape14 = new ModelRenderer(this, 7, 3);
      Shape14.addBox(0F, 0F, 0F, 14, 1, 10);
      Shape14.setRotationPoint(-7F, 23F, -5F);
      Shape14.setTextureSize(128, 32);
      Shape14.mirror = true;
      setRotation(Shape14, 0F, 0F, 0F);
      Shape1 = new ModelRenderer(this, 62, 0);
      Shape1.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1.setRotationPoint(-6F, 8F, 7F);
      Shape1.setTextureSize(128, 32);
      Shape1.mirror = true;
      setRotation(Shape1, 0F, 0F, 0F);
      Shape15d = new ModelRenderer(this, 15, 13);
      Shape15d.addBox(0F, 0F, 0F, 14, 1, 2);
      Shape15d.setRotationPoint(-7F, 23F, -7F);
      Shape15d.setTextureSize(128, 32);
      Shape15d.mirror = true;
      setRotation(Shape15d, 0F, 0F, 0F);
      Shape15 = new ModelRenderer(this, 15, 1);
      Shape15.addBox(0F, 0F, 0F, 14, 1, 2);
      Shape15.setRotationPoint(-7F, 23F, 5F);
      Shape15.setTextureSize(128, 32);
      Shape15.mirror = true;
      setRotation(Shape15, 0F, 0F, 0F);
      Shape1a = new ModelRenderer(this, 62, 0);
      Shape1a.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1a.setRotationPoint(5F, 8F, 7F);
      Shape1a.setTextureSize(128, 32);
      Shape1a.mirror = true;
      setRotation(Shape1a, 0F, 0F, 0F);
      Shape1b = new ModelRenderer(this, 62, 0);
      Shape1b.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1b.setRotationPoint(-8F, 8F, -6F);
      Shape1b.setTextureSize(128, 32);
      Shape1b.mirror = true;
      setRotation(Shape1b, 0F, 0F, 0F);
      Shape1c = new ModelRenderer(this, 62, 0);
      Shape1c.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1c.setRotationPoint(-6F, 8F, -8F);
      Shape1c.setTextureSize(128, 32);
      Shape1c.mirror = true;
      setRotation(Shape1c, 0F, 0F, 0F);
      Shape1d = new ModelRenderer(this, 62, 0);
      Shape1d.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1d.setRotationPoint(5F, 8F, -8F);
      Shape1d.setTextureSize(128, 32);
      Shape1d.mirror = true;
      setRotation(Shape1d, 0F, 0F, 0F);
      Shape1g = new ModelRenderer(this, 62, 0);
      Shape1g.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1g.setRotationPoint(7F, 8F, -6F);
      Shape1g.setTextureSize(128, 32);
      Shape1g.mirror = true;
      setRotation(Shape1g, 0F, 0F, 0F);
      Shape1f = new ModelRenderer(this, 62, 0);
      Shape1f.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1f.setRotationPoint(7F, 8F, 5F);
      Shape1f.setTextureSize(128, 32);
      Shape1f.mirror = true;
      setRotation(Shape1f, 0F, 0F, 0F);
      Shape1e = new ModelRenderer(this, 62, 0);
      Shape1e.addBox(0F, 0F, 0F, 1, 16, 1);
      Shape1e.setRotationPoint(-8F, 8F, 5F);
      Shape1e.setTextureSize(128, 32);
      Shape1e.mirror = true;
      setRotation(Shape1e, 0F, 0F, 0F);
      Shape2 = new ModelRenderer(this, 120, 0);
      Shape2.addBox(0F, 0F, 0F, 2, 17, 2);
      Shape2.setRotationPoint(-1.4F, 7.5F, 0F);
      Shape2.setTextureSize(128, 32);
      Shape2.mirror = true;
      setRotation(Shape2, 0F, 0.7853982F, 0F);
      Shape2b = new ModelRenderer(this, 120, 0);
      Shape2b.addBox(0F, 0F, 0F, 2, 17, 2);
      Shape2b.setRotationPoint(-1F, 7.5F, -1F);
      Shape2b.setTextureSize(128, 32);
      Shape2b.mirror = true;
      setRotation(Shape2b, 0F, 0F, 0F);
  }
  
  public void renderAll(List li, float phi)
  {
	  boolean fail = (Boolean)li.get(0);
	    Shape14b.render(f5);
	    Shape15b.render(f5);
	    Shape15c.render(f5);
	    Shape14.render(f5);
	    Shape1.render(f5);
	    Shape15d.render(f5);
	    Shape15.render(f5);
	    Shape1a.render(f5);
	    Shape1b.render(f5);
	    Shape1c.render(f5);
	    Shape1d.render(f5);
	    Shape1g.render(f5);
	    Shape1f.render(f5);
	    Shape1e.render(f5);
	    if (fail)
	    	return;
	      GL11.glTranslated(0, 1, 0);
	      GL11.glRotatef(phi, 0, 1, 0);
	      GL11.glTranslated(0, -1, 0);
	    Shape2.render(f5);
	    Shape2b.render(f5);
	      GL11.glTranslated(0, 1, 0);
	      GL11.glRotatef(-phi, 0, 1, 0);
	      GL11.glTranslated(0, -1, 0);
	  }

}
